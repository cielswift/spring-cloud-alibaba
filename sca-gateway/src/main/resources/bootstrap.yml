server:
  port: 25210
  servlet:
    context-path: /gateway
spring:
  application:
    name: gateway
  redis: #redis
    host: 127.0.0.1
    port: 6510
    password: ciel
    database: 2
  aop:
    proxy-target-class: true #使用cglib代理
  main:
    allow-bean-definition-overriding: true #bean冲突覆盖
  profiles:
    active: dev #开发模式
  jmx:
    enabled: true #启用jmx监控
  datasource:
    dynamic: #多数据源模式
      primary: master #设置默认的数据源或者数据源组,默认值即为master ; 两套配置的主库和从库相反
      druid: #druid 全局配置
        filters: stat #Druid内置提供一个StatFilter，用于统计监控信息
        initial-size: 8
        min-idle: 8
        max-active: 16
        time-between-eviction-runs-millis: 5000
        validation-query: SELECT 1 FROM dual
      datasource:
        master:
          username: root
          password: ciel
          driver-class-name: com.mysql.jdbc.Driver
          url: jdbc:mysql://127.0.0.1:1670/spring_alibaba?seUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai
          type: com.alibaba.druid.pool.DruidDataSource
  cloud:
#    loadbalancer:
#      retry:
#        enabled: false #启用ReactiveLoadBalancerClientFilter
    nacos:  #使用nacos注册中心
      discovery: #注册中心
        server-addr: 127.0.0.1:13100,127.0.0.1:13101,127.0.0.1:13102
        namespace: a998603d-3546-4ddc-9099-2ed82a6f3a68 #开发环境
        group: DEFAULT_GROUP #组
      config: #配置中心
        server-addr: 127.0.0.1:13100,127.0.0.1:13101,127.0.0.1:13102
        file-extension: yaml  #指定读取的配置文件后缀; dataId默认${spring.application.name}-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension}
        namespace: a998603d-3546-4ddc-9099-2ed82a6f3a68 #开发环境
        group: DEFAULT_GROUP #组
        prefix: application-dev  #文件名 ;如果没有配置则默认为 ${spring.appliction.name} (优先级高)
        refresh-enabled: true #刷新配置文件
        extension-configs: #其他配置
          - dataId: other-dev.yaml
            group: DEFAULT_GROUP
            refresh: true

    gateway:  #路由规则
      discovery:
        locator:
          enabled: true  #开启根据服务名称进行转发
          lower-case-service-id: true #微服务名称小写
#      default-filters:#默认过滤器
#        - FilXia=a,b  #默认过滤器

#      routes:
#        - id: consumer #id 任意
#          uri: lb://consumer #如果是以lb开头，则会开启负载均衡
#          predicates:
#            - Path=/con/** #请求路径带有这个,那么映射到上面uri的服务上
#            #- Before=2019-05-13T17:20:10.789-07:00[Asia/Shanghai] #并且要在这个时间之前
#            - After=2019-02-14T13:10:47.789-07:00[Asia/Shanghai]
#            #- Header=X-Request-Id, \d+ #有请求头名为 x-request-id，其值与 \d+ 正则表达式匹配（值为一个或多个数字），则此路由匹配
#            #- Method=GET
#            #- RemoteAddr=192.168.1.1.24
#            #- Weight=group1, 8
#             - Rzv=aa.bb #自定义谓词
#          filters:
#            - StripPrefix=1 #访问路径 http://127.0.0.1:5210/gateway/con/consumer/d1?name=xia
#            - AddResponseHeader=cron,* #响应添加头
#            - FilXia=a,b  #自定义过滤器
           # - StripPrefix=2 会把的请求的路径去除两位
           # curl http://localhost:9201/user-service/a/user/1 =  curl http://localhost:8201/user/1
          #  - PrefixPath=/user 会对原有路径进行增加操作
          # http://localhost:9201/1 = curl http://localhost:8201/user/1

#            - name: RequestRateLimiter #请求数限流 名字不能随便写
#              args:
#                key-resolver: "#{@ipKeyResolver}"  #获取刚才创建的对象,代码手动创建
#                redis-rate-limiter.replenishRate: 1  #令牌桶每秒填充平均速率
#                redis-rate-limiter.burstCapacity: 1  #令牌桶总容量

        #- burstCapacity：令牌桶总容量。
        #- replenishRate：令牌桶每秒填充平均速率。
        #- key-resolver：用于限流的键的解析器的 Bean 对象的名字。它使用 SpEL 表达式根据#{@beanName}从 Spring 容器中获取 Bean 对象。

      #通过在replenishRate和中设置相同的值来实现稳定的速率burstCapacity。设置burstCapacity高于时，可以允许临时突发replenishRate。
      #在这种情况下，需要在突发之间允许速率限制器一段时间（根据replenishRate），因为2次连续突发将导致请求被丢弃（HTTP 429 - Too Many Requests）
      #key-resolver: "#{@userKeyResolver}" 用于通过SPEL表达式来指定使用哪一个KeyResolver.
      #如上配置：
      #表示 一秒内，允许 一个请求通过，令牌桶的填充速率也是一秒钟添加一个令牌。
      #最大突发状况 也只允许 一秒内有一次请求，可以根据业务来调整 。


    #    loadbalancer:
#      retry:
#        enabled: true #该参数用来开启重试机制
    sentinel: #限流
      filter:
        enabled: false #若在网关流控控制台上看到了 URL 资源，就是此配置项没有置为 false
      transport:
        dashboard: 127.0.0.1:16820
      scg:  #整合gateway限流; 控制台 流控规则 -新增网关资源 ,id就是 gateway配置的routes id;
        fallback:
          mode: response
          response-status: 426
          response-body: err request

  zipkin:  #链路追踪
    base-url: http://127.0.0.1:9411/
  sleuth:
    sampler:
      probability: 1 #percentage是采样比例 1所有

ribbon:
  ReadTimeout: 5000
  ConnectTimeout: 5000

management:
  endpoints:
    web:
      exposure:
        include: '*'

logging:
  config: classpath:logback-spring.xml

clusters:
  datacenterId: 3
  machineId: 1

---
newconfig:
  rad: ${random.uuid}
  ca: ${random.int}

whitegirl:
  name: ${random.uuid}
  age: ${random.int}

spring: #多文档模式,定义一些其他配置
  profiles:
    active: dev